* Build your own Lisp

- I started this 3 years ago, before I discovered the joys of org-mode

- so the first part is some notes as I re-read through the chapters I've done

- it starts, obviously enough, with hello_world

#+BEGIN_SRC c
#include <stdio.h>
int main(int argc, char** argv) {
  puts("Hello, world!");
  return 0;
}
#+END_SRC

- the recommended compile method is below
#+BEGIN_SRC sh
cc --std=c99 -Wall hello_world.c hello_world
#+END_SRC

- i feel like a heathen for abstracting over gcc. 

- Next, there's some wonderful advice about dealing with errors
- this is pretty much the core skill of programmers
- advice is to keep doing stuff, so as not to get discouraged
- good advice (mostly)

- introduces gdb, which I know nothing about. 
- gdb tutorial can be found [[http://web.archive.org/web/20140910051410/http://www.dirac.org/linux/gdb/][here]]
- guide to valgrind is [[https://www.cprogramming.com/debugging/valgrind.html][here]]
- provides a link to the standard documentation, [[https://en.cppreference.com/w/c][here]].
** Exercises

- i have, right now <2018-08-10 Fri>, a weird issue
- my desktop environment is intercepting the keys alt-leftarrow to go to a virtual terminal, 
- and alt-right to go to the login screen
- this appears to have come from nowhere, and I should restart to see if that fixes it. 
- anyway, on with the exercises
- first one:
  - print something different

#+BEGIN_SRC c
#include <stdio.h>

int main() {
  puts("This is neither hello nor goodbye\n");
  return 0;
}
#+END_SRC
- puts adds a newline automagically

- no main

#+BEGIN_SRC c
#include <stdio.h>


  puts("This is neither hello nor goodbye\n");
  return 0;
#+END_SRC

#+BEGIN_EXAMPLE
break.c:4:8: error: expected declaration specifiers or ‘...’ before string constant
   puts("This is neither hello nor goodbye\n");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
break.c:5:3: error: expected identifier or ‘(’ before ‘return’
   return 0;
   ^~~~~~
#+END_EXAMPLE

- yeah it completely craps itself.
- gdb is started as so
#+BEGIN_SRC sh
gdb a.out
#+END_SRC

- wow that was crazy
- hello_world.c leads into some dark places
- i set a breakpoint, but couldn't do much else
- gdb seems pretty OK though, if a little *too* comprehensive. 
- next chapter, here I come :)
*** Chapter 3: Basics

- C has few features
- it is simple, but not easy

- two kinds of definitions:
  - function definitions
  - structure definitions

- execution always starts at main
- we manipulate variables
- each of these have types

#+BEGIN_SRC C
int main() {
  int count;
  int count = 10;
  char last_initial = 'H';
  int age = 23;
  long age_of_universe = 1.3789e6;
  float liters_per_pint = 0.568f;
  double speed_of_swallow = 0.01072896;


}
#+END_SRC

- functions have a return type declaration, a name and a parenthesis filled with arguments
- 
#+BEGIN_SRC C
#include <stdio.h>
int add_together(int x, int y) {
  int result = x + y;
  return result;
}
int main() {
  int num1 = 2;
  float num2 = 2.5;
  float res = add_together(num1, num2);
  printf("res is %f", res);
  return 0;
}
#+END_SRC


- Structures are used to declare new types
- several variables bundled together
#+BEGIN_SRC C
#include <stdio.h>
#include <math.h>
typedef struct {
  float x;
  float y;
} point;

int main() {
  point p;
  p.x = 0.1;
  p.y = 10;
  float length = sqrt(p.x * p.x + p.y * p.y);
  printf("length is %f\n", length);
}
#+END_SRC
- it doesn't tell us that we gave it an integer above, either

#+BEGIN_SRC sh
cc -g --std=c99 -Wall -Wpedantic  struct.c -o str.c
#+END_SRC
- this doesn't work
- I have offended the linker

#+BEGIN_SRC sh
cc -g --std=c99 -Wall -Wpedantic  struct.c -o str.c -lm
#+END_SRC

- this is the correct spell to pacify the linker
- the syntax is normally l + name of library (normally in a short form) 
- ~-lm~ links to the system maths library


- we declare pointers using the star notation ~a*~ is a pointer to a
- ~int*~ is an int pointer
- ~char*~ is a char pointer
- ~int**~ is a pointer to a pointer to an int
- pointers are needed for strings and lists
- these will apparently come up later


- represented by the pointer type ~char*~
- stored as a list of characters, with a null terminator at the end
- can be declared literally using quotation marks
**** Exercises


#+BEGIN_SRC C
#include <stdio.h>

int main() {
  for(int i = 0; i<5; i++) {
    puts("Hello, world!");
  }
  return 0;
}
#+END_SRC

#+BEGIN_SRC C
#include <stdio.h>

int main() {
  int i =5;
  while(i>0) {
    puts("Hello, world!");
    i = i - 1;

  }
  return 0;
}

#+END_SRC


#+BEGIN_SRC C
#include <stdio.h>

void print_hw(int n) {
  while(n>0) {
    puts("Hello, world!");
    n = n - 1;
  }
}

int main() {
  int num = 2;
  print_hw(num);
  return 0;

}
#+END_SRC

- statements: if, do-while, while, for, switch, break, continue, goto, return

*** Chapter 4: REPL

- first, we'll build an interactive prompt
- this will merely echo back what is put in
- allows us to get comfortable with the plumbing for our future interpreter


#+BEGIN_SRC C
#include <stdio.h>


static char input[2048];

int main(int argc, char** argv) {

  puts("Lispy version 0.0.0.1");
  puts("Press Ctrl+C to Exit\n");

  while(1) {

    fputs("lispy> ", stdout);

    fgets(input, 2048, stdin);

    printf("No you're a %s", input);

  }


}
#+END_SRC


- this works, but if run in a terminal, it can't handle C-a and C-e.
- essentially, we need to implement readline
- this is what we'll do below

#+BEGIN_SRC C
#include <stdio.h>
#include <stdlib.h>

#include <editline/readline.h>
#include <editline/history.h>

int main(int argc, char** argv) {

  puts("Lispy version 0.0.0.1");
  puts("Press Ctrl+C to Exit\n");

  while(1) {
    char* input = readline("lispy> ");

    add_history(input);

    printf("No you're an %s\n", input);

    free(input);
  }
  return 0;
}

#+END_SRC

- this program fails, unless this command has been previously run

#+BEGIN_SRC sh
sudo apt-get install libedit-dev
#+END_SRC

#+BEGIN_SRC sh
cc -g --std=c99 -Wall -Wpedantic  prompt.c -ledit -o prompt 
#+END_SRC

- this is the correct spell
- the linker is ever hungry for propiatiation
- more importantly, these are really, really undiscoverable


- the preprocessor can help with portability
- any line that starts with ~#~ is a preprocessor directive
- can detect OS, and conditionally emit code based on this
- we use #ifdef, #else and #endif preprocessor statements

#+BEGIN_SRC C
#include <stdio.h>
#include <stdlib.h>

#ifdef _WIN32
#include <string.h>

static char buffer[2048];

/* fake readline function */
char* readline(char* prompt) {
  fputs(prompt, stdout);
  fgets(buffer, 2048, stdin);
  char* cpy = malloc(strlen(buffer)+1);
  strcpy(cpy, buffer);
  cpy[strlen(cpy)-1] = '\0';
  return cpy;
}

/*fake add_history function*/
void add_history(char* unused) {}

/*otherwise include editline headers*/
#else
#include <editline/readline.h>
#include <editline/history.h>
#endif

int main(int argc, char** argv) {
  puts("Lispy Version 0.0.0.1");
  puts("Press Ctrl+C to Exit\n");

  while(1) {
    char* input = readline("lispy> ");
    add_history(input);
    printf("No, you're an %s\n", input);
    free(input);
    

  }
  return 0;
}
#+END_SRC


**** Exercises
#+BEGIN_SRC C
#include <stdio.h>
#include <stdlib.h>

#ifdef _WIN32
#include <string.h>

static char buffer[2048];

/* fake readline function */
char* readline(char* prompt) {
  fputs(prompt, stdout);
  fgets(buffer, 2048, stdin);
  char* cpy = malloc(strlen(buffer)+1);
  strcpy(cpy, buffer);
  cpy[strlen(cpy)-1] = '\0';
  return cpy;
}

/*fake add_history function*/
void add_history(char* unused) {}

/*otherwise include editline headers*/
#else
#include <editline/readline.h>
#include <editline/history.h>
#endif

#include <string.h>

int main(int argc, char** argv) {
  puts("RichLisp Version 0.0.0.1");
  puts("Press Ctrl+C to Exit\n");

  while(1) {
    char* input = readline("rlisp> ");
    add_history(input);
    int len = strlen(input);
    printf("%s is %d characters long", input, len);
    printf("\n");
    free(input);
    

  }
  return 0;
}
#+END_SRC

- so, running this from a comint buffer *shell* creates an echo before the form is evaluated
- running this in the terminal does not
- weird. 

- we have many many arguments to printf (documented [[https://en.cppreference.com/w/c/io/fprintf][here]] )
- there are safe versions since c11
- these cause errors if (amongst other things), a null pointer is present in any of the arguments
- if you use the wrong format strings for the printf calls above, you get garbage. ~%d~ and ~%x~ returned the same garbage for any input
- ~%n~ caused seg faults
- weird wanting a pointer, dunno what the deal was
- can just use ~%d~ to report numbers
- ifdef `__linux__` to conditionally include libraries
*** Chapter 5: languages

- using a parser combinator he wrote, called mpc. 

- tells people not to worry about running the code for now, focus on the ideas. 
#+BEGIN_SRC C
//this is the Doge grammar

mpc_parser_t* Adjective = mpc_or(4,
                                mpc_sym("wow"), mpc_sym("many"),
                                mpc_sym("so"), mpc_sym("such")
                                );


mpc_parser_t* Noun = mpc_or(5,
                            mpc_sym("lisp"), mpc_sym("language"),
                            mpc_sym("book"), mpc_sym("build"),
                            mpc_sym("c"));
#+END_SRC

- given these two parsers, we can define a new one

#+BEGIN_SRC C
mpc_parser_t* Phrase = mpc_and(2, mpcf_strfold, Adjective, Noun, free);
#+END_SRC

-we need to specify that zero or more of some phrase are required
- this is done with ~mpc_many~

#+BEGIN_SRC C
mpc_parser_t* Doge = mpc_many(mpcf_strfold, Phrase)
#+END_SRC


- we can slowly build up parsers for more complicated languages
- this approach doesn't scale that well, and we have a different method, documented below

#+BEGIN_SRC C
mpc_parser_t* Adjective = mpc_new("adjective");
mpc_parser_t* Noun = mpc_new("noun");
mpc_parser_t* Phrase = mpc_new("phrase");
mpc_parser_t* Doge = mpc_new("doge");

mpca_lang(MPCA_LANG_DEFAULT,
          "\
adjective : \"wow\"| \"many\" \
 | \"so\" \"such\"; \
noun : \"lisp\" \"language\" \
| \"book\"| \"build\" | \"c\";\
phrase : <adjective> <noun>;\
doge : <phrase>*; \
",
          Adjective, Noun, Phrase, Doge);

/* insert parsing here */
mpc_cleanup(4, Adjective, Noun, Phrase, Doge);
#+END_SRC

- wow lisp
- wow build many lisp so c
- to escape the quotes so that they won't end the string prematurely
- because C strings are awful
- and because C is really old

- decimal number grammar:
  - atom is 0.9
  - decimal is made up of atom . atom
  - separated by a dot
  - can only be one dot

- url grammar:
  - protocol (http://)
  - method (www)
  - tld (.com)
  - name, [a-z_-]+ (url)
  - name + tld = path
  - protocol + method = route
  - url: route + path
*** Chapter 6: Parsing

- implement a small grammar (Polish notation)
- operator comes before operands i.e. + 2 3 4 \ 5

- start by describing the grammar textually
- later formalise
- we'll use regexes to match numbers and other strings more precisely

- firstly, we need to get the damn *mpc* library
- right got it with github

#+BEGIN_SRC sh
git clone https://github.com/orangeduck/mpc
cd mpc
make
cp mpc.c mpc.h ..
#+END_SRC

- some small sysadminey stuff up there
- allows us to #include mpc.h though


#+BEGIN_SRC C
#include <stdio.h>
#include <stdlib.h>
#include "mpc.h"
#ifdef _WIN32
#include <string.h>

static char buffer[2048];

/* fake readline function */
char* readline(char* prompt) {
  fputs(prompt, stdout);
  fgets(buffer, 2048, stdin);
  char* cpy = malloc(strlen(buffer)+1);
  strcpy(cpy, buffer);
  cpy[strlen(cpy)-1] = '\0';
  return cpy;
}

/*fake add_history function*/
void add_history(char* unused) {}

/*otherwise include editline headers*/
#else
#include <editline/readline.h>
#include <editline/history.h>
#endif

#include <string.h>

int main(int argc, char** argv) {
  puts("RichLisp Version 0.0.0.1");
  puts("Press Ctrl+C to Exit\n");

  while(1) {
    char* input = readline("rlisp> ");
    add_history(input);
    int len = strlen(input);
    printf("%s is %d characters long", input, len);
    printf("\n");
    free(input);
    

  }
  return 0;
}
#+END_SRC


- he tells us to rename the code, but I can repeat given that I'm using org-mode
- and attempting to document this process somewhat

#+BEGIN_SRC sh
cc -std=c99 -Wall parsing.c mpc.c -ledit -lm -o parsing
#+END_SRC
#+NAME: polish_parser
#+BEGIN_SRC C
mpc_parser_t* Number = mpc_new("number");
mpc_parser_t* Operator = mpc_new("operator");
mpc_parser_t* Expr = mpc_new("expr");
mpc_parser_t* Lispy = mpc_new("lispy");

/* define with the following language */
mpca_lang(MPCA_LANG_DEFAULT,
          "\
           \
number: /-?[0-9]+/ ; \
operator: '+' | '-' | '*' | '/';\
expr: <number> | '(' <operator> <expr>+ ')'; \
lispy: /^/ <operator> <expr>+ /$/; \
", Number, Operator, Expr, Lispy);

  
#+END_SRC



#+BEGIN_SRC C
#include <stdio.h>
#include <stdlib.h>
#include "mpc.h"
#ifdef _WIN32
#include <string.h>

static char buffer[2048];

/* fake readline function */
char* readline(char* prompt) {
  fputs(prompt, stdout);
  fgets(buffer, 2048, stdin);
  char* cpy = malloc(strlen(buffer)+1);
  strcpy(cpy, buffer);
  cpy[strlen(cpy)-1] = '\0';
  return cpy;
}

/*fake add_history function*/
void add_history(char* unused) {}

/*otherwise include editline headers*/
#else
#include <editline/readline.h>
#include <editline/history.h>
#endif

#include <string.h>


int main(int argc, char** argv) {
  puts("RichLisp Version 0.0.0.1");
  puts("Press Ctrl+C to Exit\n");
  mpc_parser_t* Number = mpc_new("number");
  mpc_parser_t* Operator = mpc_new("operator");
  mpc_parser_t* Expr = mpc_new("expr");
  mpc_parser_t* Lispy = mpc_new("lispy");
  
  /* define with the following language */
  mpca_lang(MPCA_LANG_DEFAULT,
            "\
             \
  number: /-?[0-9]+/ ; \
  operator: '+' | '-' | '*' | '/';\
  expr: <number> | '(' <operator> <expr>+ ')'; \
  lispy: /^/ <operator> <expr>+ /$/; \
  ", Number, Operator, Expr, Lispy);
  
    
  while(1) {
    char* input = readline("rlisp> ");
    add_history(input);
    int len = strlen(input);
    printf("%s is %d characters long", input, len);
    printf("\n");
    free(input);
    

  }
  return 0;
}
#+END_SRC


- the <<>> syntax above splices in the other code block, before evaluation or tangling
- that's super nice
- i can see how people do literate programming now
- which autocomplteted to noweb, which was a little hilarious
